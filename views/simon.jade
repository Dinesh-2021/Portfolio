//
   Created by Briana on 12/22/15.

//
   Created by Briana on 10/26/15.
doctype html
html
   head
      title= title
      link(rel='stylesheet', href='/stylesheets/simon.css')
      link(href='http://fonts.googleapis.com/css?family=VT323', rel='stylesheet', type='text/css')
      meta(name="viewport", content="width=device-width, initial-scale=1")
      link(rel='stylesheet', href='https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js')
      link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css', integrity='sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==', crossorigin='anonymous')
      script(src="https://fb.me/react-0.13.3.js")
      script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js")
   block content
      body
        .container
           .row
              h1 Simon Game
           .row
              .col-xs-3
                 h3 Current # of steps:
              .col-xs-3
                 h3#currentLength 0
              .col-xs-3
                 button#restart Restart
              .col-xs-3
                 button#strict Enable Strict Mode
           .row
              button#start Start
           .row
              .col-xs-6#red.color Red
              .col-xs-6#blue.color Blue
           .row
              .col-xs-6#yellow.color Yellow
              .col-xs-6#green.color Green
           .row
   script.
      //computer starts with empty pattern
      var compArr = [];

      //user starts with empty pattern
      var userArr = [];

      var userError = false;

      var strict = false;

      function randomizer(){
      //function returns a random number 1-4
         var random = Math.floor((Math.random() * (5 - 1)) + 1);
         compArr.push(random);
      };

      function compPlayer(num){
         if (num === 1){
            Red();
         } else if (num === 2){
            Blue();
         } else if (num === 3){
            Yellow();
         } else if (num === 4){
            Green();
         };
      }

      var time = 1300;

      function timer(){
         if (compArr.length < 5){
            time = 1300;
         } else if ((compArr.length >= 5) &&
                 (compArr.length < 9)){
            time = 1000;
         } else if ((compArr.length >= 9) &&
                 (compArr.length < 13)){
            time = 800;
         } else if (compArr.length >= 13){
            time = 600;
         };
      };

      function Red(){
         //when called, this function will light up #red and play a designated sound
         var audio = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound1.mp3');
         audio.play();

         timer();

         $("#red").toggleClass("redActive");
         setTimeout(function(){
            $("#red").toggleClass("redActive");
         }, time);
      };

      function Blue(){
         //when called, this function will light up #blue and play a designated sound
         var audio = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound2.mp3');
         audio.play();

         timer();

         $("#blue").toggleClass("blueActive");
            setTimeout(function(){
            $("#blue").toggleClass("blueActive");
         }, time);
      };

      function Yellow(){
         //when called, this function will light up #yellow and play a designated sound
         var audio = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound3.mp3');
         audio.play();

         timer();

         $("#yellow").toggleClass("yellowActive");
         setTimeout(function(){
            $("#yellow").toggleClass("yellowActive");
         }, time);
      };

      function Green(){
         //when called, this function will light up #green and play a designated sound
         var audio = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound4.mp3');
         audio.play();

         timer();


         $("#green").toggleClass("greenActive");
         setTimeout(function(){
            $("#green").toggleClass("greenActive");
         }, time);
      };

      function sequencePlayer(){
         randomizer();
         var i = 1;
         compArr.forEach(function(entry){
            setTimeout(function(){
               compPlayer(entry);
            }, (1000 * i));
            i += 1;
         });
         userArr = [];
         $("#currentLength").html(compArr.length);
      };

      function redClick(){
         //color function will initiate
         Red();
         //that color's number will be added to userArr
         userArr.push(1);
      };

      function blueClick(){
         //color function will initiate
         Blue();
         //that color's number will be added to userArr
         userArr.push(2);
      };

      function yellowClick(){
         //color function will initiate
         Yellow();
         //that color's number will be added to userArr
         userArr.push(3);
      };

      function greenClick(){
         //color function will initiate
         Green();
         //that color's number will be added to userArr
         userArr.push(4);
      };

      function compare(){
         if (userArr.length === 20){
            if (compArr.join() === userArr.join()){
               setTimeout(function(){
                  alert("You've done it! You've won! Now...again!");
               }, 1000);
               compArr = [];
               userArr = [];
               sequencePlayer();
            }
         }
         if (compArr.length === userArr.length){
            if (compArr.join() === userArr.join()){
               sequencePlayer();
            } else {
               if (strict){
                  setTimeout(function(){
                     alert("You lost. Try again! Or don't.");
                  }, 1000);
                  userArr = [];
                  compArr = [];
                  userError = false;
                  sequencePlayer();
               } else {
                  setTimeout(function(){
                     alert("Whoops...let's try that again.");
                  }, 1000);
                  userArr = [];
                  userError = false;
                  compArr.forEach(function(entry) {
                     var i = 1;
                     compArr.forEach(function (entry) {
                        setTimeout(function () {
                           compPlayer(entry);
                        }, (1000 * i));
                        i += 1;
                     });
                  });
               };
            };
         }
      }

      $(document).ready(function(){
         $("#start").click(function(){
            sequencePlayer();
         });

         $("#red").click(function(){
            redClick();
            compare();
         });

         $("#blue").click(function(){
            blueClick();
            compare();
         });

         $("#yellow").click(function(){
            yellowClick();
            compare();
         });

         $("#green").click(function(){
            greenClick();
            compare();
         });

         $("#restart").click(function(){
            compArr = [];
            userArr = [];
            userError = false;
            sequencePlayer();
         });

         $("#strict").click(function(){
            if (strict === false){
               $("#strict").html("Disable Strict Mode");
               strict = true;
            } else {
               $("#strict").html("Enable Strict Mode");
               strict = false;
            }

         });

      });


      //computer starts with empty pattern - done
      //randomizer function returns a random number 1-4 - done
      //each color has a function to light up and make a sound - done
         //computer randomizes pattern - function will return random number 1-4 - done
         //computer plays pattern - initiate sound/light pattern of color - done
         //user mimics pattern - each click initates sound/light function and stores into new array - done
         //computer stores user's pattern - done
         //computer compares user & computer pattern - done
      //if they match - done
         //computer adds to pattern - done
         //computer plays pattern - done
         //user mimcs pattern - done
         //computer stores user's pattern - done
         //computer compares user & computer pattern - done
      //if they don't - done
         //computer sends error message - done
      //User Story: I can see how many steps are in the current series of button presses. - done
      //User Story: If I want to restart, I can hit a button to do so, and the game will return to a single step. - done
      //User Story: I can play in strict mode where if I get a button press wrong, it notifies me that I have done so, and the game restarts at a new random series of button presses. - done
      //User Story: The tempo of the game speeds up incrementally on the 5th, 9th and 13th step.
      //once user reaches 20
         //User Story: I can win the game by getting a series of 20 steps correct. I am notified of my victory, then the game starts over. - done